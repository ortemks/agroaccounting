import { Types } from 'mongoose';
import { ObjectId } from './primitive-types';

type ArrayItemType<T> = T extends (infer ArrayItemType)[] ? ArrayItemType : T
type IsNestedObject<T, TypeIfObject, TypeIfPrimitive = T> = T extends Types.ObjectId ? T : 
T extends Date ? T :
T extends object ? TypeIfObject : TypeIfPrimitive;

namespace dataFilter {;
    type IsQuantiative<T> = T extends number | Date ? T| { gte?: T, lte?: T, in?: T[], nin?: T[] } : T | { in?: T[], nin?: T[] };

    type PrimitiveType<T> = IsQuantiative<IsNestedObject<ArrayItemType<T>, DataFilter<ArrayItemType<T>>>>;
    type ArrayProperty<T> = T | { in?: T, nin?: T } | { contains?: PrimitiveType<T>[], nContains?: PrimitiveType<T>[] };

    export type DataFilter<DataType> = { [ property in keyof (DataType & { _id: ObjectId }) ]+?: (DataType & { _id: ObjectId })[property] extends any[] ? 
    ArrayProperty<(DataType & { _id: ObjectId })[property]> : PrimitiveType<(DataType & { _id: ObjectId })[property]> };
}
type DataFilter<DataType> = dataFilter.DataFilter<DataType>;

type DataCreation<DataType, AutoGeneratedProperties extends keyof (DataType & { _id: ObjectId}) = never> = Omit<DataType, AutoGeneratedProperties>;

namespace dataUpdate {
    type IsNestedDocument<T> = IsNestedObject<T, DataUpdate<T>["update"]>

    type NestedObjectArray<T> = T | { add?: T, remove?: DataUpdate<ArrayItemType<T>>["filter"] } | DataUpdate<ArrayItemType<T>>;
    type PrimitiveArray<T> = T | { add?: T, remove?: T}

    type ArrayProperty<T> = IsNestedObject<ArrayItemType<T>, NestedObjectArray<T>, PrimitiveArray<T>>;

    export type DataUpdate<DataType, AutoGeneratedProperties extends keyof (DataType & { _id: ObjectId}) = never> = {
        filter: DataFilter<DataType>,
        update: { [ property in keyof DataCreation<DataType, AutoGeneratedProperties> ]+?: DataType[property] extends any[] ?
            ArrayProperty<DataType[property]> : IsNestedDocument<DataType[property]>
        }
    }
}
type DataUpdate<DataType, AutoGeneratedProperties extends keyof (DataType & { _id: ObjectId}) = never> = dataUpdate.DataUpdate<DataType, AutoGeneratedProperties>;

export { DataFilter, DataCreation, DataUpdate }